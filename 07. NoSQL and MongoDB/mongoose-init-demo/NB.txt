when you have to use POST to save in DB:
    router.post('/create', async (req, res) => {
    --->let savedMovie = await Movie.create(req.body);<---
        console.log(savedMovie);
        res.redirect('/movies');
    })

MIND mongoose tolerates flexibility:
- it will save more fields in a newly created document /.save() or .create()/
- it will save only title even if title out of (title, desc, year per Schema) is saved, neglecting the absence of the other two example fields
- it will, however, require as obligatory a field if required option in Schema is set to true, otherwise -> error msg
IF you have set required: true =>
const movieSchema = new mongoose.Schema({
    title: {
        type: String,
        required: [true, 'Movie title is required'],
        minlength: 2,

    }
});

otherwise ->   const castError = new CastError();
                    ^
CastError: Cast to ObjectId failed for value "create" (type string) at path "_id" for model "Movie"

1:40:00 
The first argument is the singular name of the collection your model is for. 
Mongoose automatically looks for the plural, lowercased version of your model name. Thus, 
for the example above, the model Tank is for the tanks collection in the database.
=> mongoose.model('Movie', movieSchema) => 'Movie' === movies

your DB is movieSuggester
your collection is movies
=>
mongoose.connect('mongodb://localhost:27017/movieSuggester'); in index.js

const Movie = mongoose.model('Movie', movieSchema); in Model.js

